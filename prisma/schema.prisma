generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum Genders {
  MALE
  FEMALE
}

enum BloodGroup {
  A_POSITIVE
  B_POSITIVE
  O_POSITIVE
  AB_POSITIVE
  A_NEGATIVE
  B_NEGATIVE
  O_NEGATIVE
  AB_NEGATIVE
}

enum MaritalStatus {
  MARRIED
  UNMARRIED
}

enum AppointmentStatus {
  SCHEDULED
  INPROGRESS
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  PAID
  UNPAID
}

model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String
  role               UserRole
  needPasswordChange Boolean    @default(true)
  status             UserStatus @default(ACTIVE)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  admin              Admin?
  doctor             Doctor?
  patient            Patient?

  @@map("users")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  userEmail     User     @relation(fields: [email], references: [email])
  profilePhoto  String?
  contactNumber String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("admins")
}

model Doctor {
  id                  String             @id @default(uuid())
  name                String
  email               String             @unique
  userEmail           User               @relation(fields: [email], references: [email])
  profilePhoto        String?
  contactNumber       String
  address             String
  registrationNumber  String
  experience          Int
  gender              Genders
  appointmentFee      Int
  qualification       String
  currentWorkingPlace String
  designation         String
  averageRating       Float              @default(0)
  isDeleted           Boolean            @default(false)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  doctorSpecialties   DoctorSpecialtie[]
  doctorSchedules     DoctorSchedules[]
  appointments        Appointment[]
  prescriptions       Prescription[]
  reviews             Review[]

  @@map("doctors")
}

model Specialties {
  id                String             @id @default(uuid())
  title             String
  icon              String
  doctorSpecialties DoctorSpecialtie[]

  @@map("specialties")
}

model DoctorSpecialtie {
  specialitiesId String
  specialties    Specialties @relation(fields: [specialitiesId], references: [id])
  doctorId       String
  doctor         Doctor      @relation(fields: [doctorId], references: [id])

  @@id([doctorId, specialitiesId])
  @@map("doctorSpecialties")
}

model Patient {
  id                String             @id @default(uuid())
  name              String
  email             String             @unique
  userEmail         User               @relation(fields: [email], references: [email])
  profilePhoto      String?
  contactNumber     String
  address           String
  isDeleted         Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  patientHealthData PatientHealthData?
  medicalReport     MedicalReport[]
  appointments      Appointment[]
  prescriptions     Prescription[]
  reviews           Review[]

  @@map("patients")
}

model PatientHealthData {
  id                  String        @id @default(uuid())
  patientId           String        @unique
  patient             Patient       @relation(fields: [patientId], references: [id])
  dateOfBirth         DateTime
  gender              Genders
  bloodGroup          BloodGroup
  hasAllergies        Boolean?      @default(false)
  hasDiabetes         Boolean?      @default(false)
  height              String
  weight              String
  smokingStatus       Boolean?      @default(false)
  dietaryPreferences  String?       @default("N/A")
  pregnancyStatus     Boolean?      @default(false)
  mentalHealthHistory String?       @default("N/A")
  immunizationStatus  String?       @default("N/A")
  hasPastSurgeries    Boolean?      @default(false)
  recentAnxiety       Boolean?      @default(false)
  recentDepression    Boolean?      @default(false)
  maritalStatus       MaritalStatus
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@map("patientHealthDatas")
}

model MedicalReport {
  id         String   @id @default(uuid())
  patientId  String
  patient    Patient  @relation(fields: [patientId], references: [id])
  reportName String
  reportLink String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("medicalReports")
}

model Schedule {
  id              String            @id @default(uuid())
  startDate       DateTime
  endDate         DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  doctorSchedules DoctorSchedules[]
  appointment     Appointment?

  @@map("schedules")
}

model DoctorSchedules {
  doctorId      String
  doctor        Doctor   @relation(fields: [doctorId], references: [id])
  scheduleId    String
  schedule      Schedule @relation(fields: [scheduleId], references: [id])
  isBooked      Boolean
  appointmentId String   @unique

  @@id([doctorId, scheduleId, appointmentId])
  @@map("doctorSchedules")
}

model Appointment {
  id             String            @id @default(uuid())
  patientId      String
  patien         Patient           @relation(fields: [patientId], references: [id])
  doctorId       String
  doctor         Doctor            @relation(fields: [doctorId], references: [id])
  scheduleId     String            @unique
  schedule       Schedule          @relation(fields: [scheduleId], references: [id])
  videoCallingId String
  status         AppointmentStatus
  paymentStatus  PaymentStatus
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  payment        Payment?
  prescription   Prescription?
  review         Review?

  @@map("appointments")
}

model Payment {
  id                 String        @id @default(uuid())
  appointtmentId     String        @unique
  appointtment       Appointment   @relation(fields: [appointtmentId], references: [id])
  amount             String
  transactionId      String
  status             PaymentStatus
  paymentGatewayData Json
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  @@map("payments")
}

model Prescription {
  id            String      @id @default(uuid())
  appointmentId String      @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  doctorId      String
  doctor        Doctor      @relation(fields: [doctorId], references: [id])
  patientId     String
  patient       Patient     @relation(fields: [patientId], references: [id])
  instructions  String
  followUpDate  DateTime
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("prescriptions")
}

model Review {
  id            String      @id @default(uuid())
  appointmentId String      @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  doctorId      String
  doctor        Doctor      @relation(fields: [doctorId], references: [id])
  patientId     String
  patient       Patient     @relation(fields: [patientId], references: [id])
  rating        Float
  comment       String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("reviews")
}
